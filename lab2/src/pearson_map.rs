use common::containers::traits::{
    ErasableContainer, FillableContainer, SearchableContainer, SizedContainer,
};
use std::marker::PhantomData;

const PERMUTATION: [u8; 256] = [
    0x9E, 0x7D, 0x80, 0x40, 0x4B, 0x69, 0x34, 0x2A, 0x55, 0xE5, 0xD7, 0x8A, 0x1A, 0xA2, 0x2D, 0xAA,
    0x58, 0xF8, 0x7E, 0x03, 0xC1, 0x6E, 0x9C, 0x4C, 0x1E, 0xDF, 0x63, 0x5B, 0x8D, 0x12, 0xF5, 0xE1,
    0x73, 0x97, 0x8B, 0x2C, 0x7A, 0xF4, 0xC0, 0x41, 0x4A, 0xF3, 0xAA, 0xB6, 0x3E, 0x98, 0x79, 0x2B,
    0xCE, 0xDA, 0xD4, 0x87, 0xD5, 0x3F, 0xBB, 0xA3, 0x62, 0x56, 0xE0, 0x3C, 0x86, 0x44, 0xAD, 0x9A,
    0x8E, 0x7F, 0xB0, 0xE2, 0x99, 0x3B, 0xA0, 0xAC, 0x6C, 0x1D, 0xC6, 0x71, 0xC8, 0xB5, 0x5C, 0x14,
    0x22, 0xB3, 0xDB, 0xB4, 0x9F, 0x13, 0xA5, 0x2E, 0xF1, 0x48, 0x72, 0x4D, 0xF9, 0x9B, 0xE3, 0x1C,
    0x77, 0x2F, 0x75, 0x15, 0xC3, 0xE4, 0x5F, 0x70, 0xD6, 0x4E, 0x2A, 0xC2, 0xB8, 0xC7, 0x45, 0x10,
    0xE9, 0x57, 0x5A, 0xA6, 0xF2, 0x68, 0x9D, 0x8F, 0x1B, 0x26, 0x24, 0xD2, 0xC4, 0x3D, 0xEE, 0x0E,
    0xED, 0x2C, 0x61, 0xD0, 0xC5, 0xA9, 0x20, 0x50, 0x6F, 0x27, 0x4F, 0x3A, 0x4D, 0xE6, 0x76, 0xD3,
    0x30, 0xF7, 0xB9, 0xAC, 0x11, 0xF0, 0xE8, 0xC9, 0x5D, 0x1F, 0x8C, 0xE7, 0xD1, 0xD9, 0x0C, 0x25,
    0xE1, 0x32, 0x52, 0x37, 0x6A, 0x81, 0x6E, 0x35, 0x33, 0x39, 0xC0, 0x91, 0x46, 0xB3, 0x15, 0x3C,
    0xB7, 0x74, 0xD4, 0x72, 0x78, 0x83, 0x0B, 0x6B, 0x30, 0x9C, 0x55, 0x67, 0x91, 0xA7, 0xB8, 0x4A,
    0x8D, 0x47, 0xB1, 0x20, 0x5B, 0x8B, 0x4F, 0xA2, 0x6C, 0x19, 0x11, 0x88, 0x8C, 0x0E, 0x3A, 0x10,
    0x56, 0x66, 0xB7, 0x09, 0xF5, 0x0F, 0xE7, 0x5E, 0x4C, 0x4D, 0x2A, 0xC3, 0x0A, 0x6B, 0x13, 0xC5,
    0xC8, 0x74, 0x77, 0xEA, 0xB6, 0x5C, 0x36, 0x38, 0x92, 0xF6, 0x9A, 0xEC, 0x9F, 0x71, 0x01, 0x94,
    0xC6, 0xF8, 0xF2, 0x6D, 0x94, 0x76, 0x45, 0x80, 0xC1, 0x37, 0x4E, 0xA1, 0x57, 0x09, 0x0C, 0x7C,
];

pub fn pearson_hash(input: &[u8]) -> u8 {
    let mut hash: u8 = 0;
    for &byte in input {
        let index = (hash ^ byte) & 0xFF;
        hash = PERMUTATION[index as usize];
    }
    hash
}

fn to_index(key: &str) -> usize {
    let hash = pearson_hash(key.as_bytes());
    hash as usize
}

pub struct Pair<ValueType>(String, ValueType)
where
    ValueType: Default;

impl<ValueType> Default for Pair<ValueType>
where
    ValueType: Default,
{
    #[inline(always)]
    fn default() -> Self {
        Self(String::default(), ValueType::default())
    }
}

pub struct PearsonMap<ValueType, List>
where
    ValueType: Default,
    List: Default
        + FillableContainer<Pair<ValueType>>
        + SearchableContainer<Pair<ValueType>>
        + ErasableContainer<Pair<ValueType>>,
{
    lists: [List; PERMUTATION.len()],
    size: usize,
    _marker: PhantomData<ValueType>,

    #[cfg(feature = "count_collisions")]
    collision_counter: usize,
}

impl<ValueType, List> Default for PearsonMap<ValueType, List>
where
    ValueType: Default,
    List: Default
        + FillableContainer<Pair<ValueType>>
        + SearchableContainer<Pair<ValueType>>
        + ErasableContainer<Pair<ValueType>>,
{
    #[inline(always)]
    fn default() -> Self {
        Self {
            lists: std::array::from_fn(|_| Default::default()),
            size: 0usize,
            _marker: Default::default(),

            #[cfg(feature = "count_collisions")]
            collision_counter: 0,
        }
    }
}

impl<ValueType, List> PearsonMap<ValueType, List>
where
    ValueType: Default,
    List: Default
        + FillableContainer<Pair<ValueType>>
        + SearchableContainer<Pair<ValueType>>
        + ErasableContainer<Pair<ValueType>>
        + SizedContainer,
{
    pub fn put(&mut self, key: String, value: ValueType) {
        let list = &mut self.lists[to_index(&key)];
        let mut value = Some(value);

        list.find_mut(|Pair(found_key, _)| key == *found_key)
            .map(|found_value| found_value.1 = value.take().unwrap())
            .or_else(|| {
                #[cfg(feature = "count_collisions")]
                {
                    self.collision_counter += (list.size() > 0) as usize;
                }
                self.size += 1;
                list.push(Pair(key, value.take().unwrap()));
                None
            });
    }

    pub fn find(&self, key: &str) -> Option<&ValueType> {
        self.lists[to_index(key)]
            .find(|Pair(found_key, _)| key == found_key)
            .map(|Pair(_, value)| value)
    }

    pub fn get(&mut self, key: &str) -> Option<ValueType> {
        self.lists[to_index(key)]
            .erase_first(|Pair(found_key, _)| key == found_key)
            .inspect(|_| self.size = self.size.wrapping_sub(1))
            .map(|Pair(_, value)| value)
    }

    pub fn size(&self) -> usize {
        self.size
    }

    #[cfg(feature = "count_collisions")]
    pub fn collision_counter(&self) -> usize {
        self.collision_counter
    }
}
